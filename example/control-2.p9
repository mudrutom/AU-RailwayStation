% all the path constants need to be different
((in2_out3_0 != in2_out2_1) & (in2_out3_0 != in2_out2_0) & (in2_out3_0 != in2_out1_1) & (in2_out3_0 != in2_out1_0) & (in2_out3_0 != in1_out3_0) & (in2_out3_0 != in1_out2_0) & (in2_out3_0 != in1_out1_1) & (in2_out3_0 != in1_out1_0) & (in2_out3_0 != in3_out3_0) & (in2_out3_0 != in3_out2_1) & (in2_out3_0 != in3_out2_0) & (in2_out3_0 != in3_out1_1) & (in2_out3_0 != in3_out1_0) & (in2_out2_1 != in2_out2_0) & (in2_out2_1 != in2_out1_1) & (in2_out2_1 != in2_out1_0) & (in2_out2_1 != in1_out3_0) & (in2_out2_1 != in1_out2_0) & (in2_out2_1 != in1_out1_1) & (in2_out2_1 != in1_out1_0) & (in2_out2_1 != in3_out3_0) & (in2_out2_1 != in3_out2_1) & (in2_out2_1 != in3_out2_0) & (in2_out2_1 != in3_out1_1) & (in2_out2_1 != in3_out1_0) & (in2_out2_0 != in2_out1_1) & (in2_out2_0 != in2_out1_0) & (in2_out2_0 != in1_out3_0) & (in2_out2_0 != in1_out2_0) & (in2_out2_0 != in1_out1_1) & (in2_out2_0 != in1_out1_0) & (in2_out2_0 != in3_out3_0) & (in2_out2_0 != in3_out2_1) & (in2_out2_0 != in3_out2_0) & (in2_out2_0 != in3_out1_1) & (in2_out2_0 != in3_out1_0) & (in2_out1_1 != in2_out1_0) & (in2_out1_1 != in1_out3_0) & (in2_out1_1 != in1_out2_0) & (in2_out1_1 != in1_out1_1) & (in2_out1_1 != in1_out1_0) & (in2_out1_1 != in3_out3_0) & (in2_out1_1 != in3_out2_1) & (in2_out1_1 != in3_out2_0) & (in2_out1_1 != in3_out1_1) & (in2_out1_1 != in3_out1_0) & (in2_out1_0 != in1_out3_0) & (in2_out1_0 != in1_out2_0) & (in2_out1_0 != in1_out1_1) & (in2_out1_0 != in1_out1_0) & (in2_out1_0 != in3_out3_0) & (in2_out1_0 != in3_out2_1) & (in2_out1_0 != in3_out2_0) & (in2_out1_0 != in3_out1_1) & (in2_out1_0 != in3_out1_0) & (in1_out3_0 != in1_out2_0) & (in1_out3_0 != in1_out1_1) & (in1_out3_0 != in1_out1_0) & (in1_out3_0 != in3_out3_0) & (in1_out3_0 != in3_out2_1) & (in1_out3_0 != in3_out2_0) & (in1_out3_0 != in3_out1_1) & (in1_out3_0 != in3_out1_0) & (in1_out2_0 != in1_out1_1) & (in1_out2_0 != in1_out1_0) & (in1_out2_0 != in3_out3_0) & (in1_out2_0 != in3_out2_1) & (in1_out2_0 != in3_out2_0) & (in1_out2_0 != in3_out1_1) & (in1_out2_0 != in3_out1_0) & (in1_out1_1 != in1_out1_0) & (in1_out1_1 != in3_out3_0) & (in1_out1_1 != in3_out2_1) & (in1_out1_1 != in3_out2_0) & (in1_out1_1 != in3_out1_1) & (in1_out1_1 != in3_out1_0) & (in1_out1_0 != in3_out3_0) & (in1_out1_0 != in3_out2_1) & (in1_out1_0 != in3_out2_0) & (in1_out1_0 != in3_out1_1) & (in1_out1_0 != in3_out1_0) & (in3_out3_0 != in3_out2_1) & (in3_out3_0 != in3_out2_0) & (in3_out3_0 != in3_out1_1) & (in3_out3_0 != in3_out1_0) & (in3_out2_1 != in3_out2_0) & (in3_out2_1 != in3_out1_1) & (in3_out2_1 != in3_out1_0) & (in3_out2_0 != in3_out1_1) & (in3_out2_0 != in3_out1_0) & (in3_out1_1 != in3_out1_0)) # label(pathAllDiff).

% switch configuration axiom for (in2->out3)#0
(all X (conf(X, in2_out3_0) <-> ((switch(X, s4) = s3) & (switch(X, s3) = out3)))) # label(conf_in2_out3_0).
% free path axiom for (in2->out3)#0
(all X (free(X, in2_out3_0) <-> (all T (-at(X, T, s4) & -at(X, T, s3) & -at(X, T, out3) & -at(X, T, s2) & -at(X, T, s7) & -at(X, T, s5))))) # label(free_in2_out3_0).

% switch configuration axiom for (in2->out2)#1
(all X (conf(X, in2_out2_1) <-> ((switch(X, s4) = out2)))) # label(conf_in2_out2_1).
% free path axiom for (in2->out2)#1
(all X (free(X, in2_out2_1) <-> (all T (-at(X, T, s4) & -at(X, T, out2) & -at(X, T, s3) & -at(X, T, s2) & -at(X, T, s7) & -at(X, T, s5))))) # label(free_in2_out2_1).

% switch configuration axiom for (in2->out2)#0
(all X (conf(X, in2_out2_0) <-> ((switch(X, s4) = s3) & (switch(X, s3) = out2)))) # label(conf_in2_out2_0).
% free path axiom for (in2->out2)#0
(all X (free(X, in2_out2_0) <-> (all T (-at(X, T, s4) & -at(X, T, s3) & -at(X, T, out2) & -at(X, T, s2) & -at(X, T, s7) & -at(X, T, s5))))) # label(free_in2_out2_0).

% switch configuration axiom for (in2->out1)#1
(all X (conf(X, in2_out1_1) <-> ((switch(X, s4) = s2)))) # label(conf_in2_out1_1).
% free path axiom for (in2->out1)#1
(all X (free(X, in2_out1_1) <-> (all T (-at(X, T, s4) & -at(X, T, s2) & -at(X, T, out1) & -at(X, T, s3) & -at(X, T, s7) & -at(X, T, s5))))) # label(free_in2_out1_1).

% switch configuration axiom for (in2->out1)#0
(all X (conf(X, in2_out1_0) <-> ((switch(X, s4) = s3) & (switch(X, s3) = out1)))) # label(conf_in2_out1_0).
% free path axiom for (in2->out1)#0
(all X (free(X, in2_out1_0) <-> (all T (-at(X, T, s4) & -at(X, T, s3) & -at(X, T, out1) & -at(X, T, s2) & -at(X, T, s7) & -at(X, T, s5))))) # label(free_in2_out1_0).

% switch configuration axiom for (in1->out3)#0
(all X (conf(X, in1_out3_0) <-> ((switch(X, s7) = s3) & (switch(X, s3) = out3)))) # label(conf_in1_out3_0).
% free path axiom for (in1->out3)#0
(all X (free(X, in1_out3_0) <-> (all T (-at(X, T, s7) & -at(X, T, s3) & -at(X, T, out3) & -at(X, T, s4) & -at(X, T, s2) & -at(X, T, s5))))) # label(free_in1_out3_0).

% switch configuration axiom for (in1->out2)#0
(all X (conf(X, in1_out2_0) <-> ((switch(X, s7) = s3) & (switch(X, s3) = out2)))) # label(conf_in1_out2_0).
% free path axiom for (in1->out2)#0
(all X (free(X, in1_out2_0) <-> (all T (-at(X, T, s7) & -at(X, T, s3) & -at(X, T, out2) & -at(X, T, s4) & -at(X, T, s2) & -at(X, T, s5))))) # label(free_in1_out2_0).

% switch configuration axiom for (in1->out1)#1
(all X (conf(X, in1_out1_1) <-> ((switch(X, s7) = s3) & (switch(X, s3) = out1)))) # label(conf_in1_out1_1).
% free path axiom for (in1->out1)#1
(all X (free(X, in1_out1_1) <-> (all T (-at(X, T, s7) & -at(X, T, s3) & -at(X, T, out1) & -at(X, T, s4) & -at(X, T, s2) & -at(X, T, s5))))) # label(free_in1_out1_1).

% switch configuration axiom for (in1->out1)#0
(all X (conf(X, in1_out1_0) <-> ((switch(X, s7) = s2)))) # label(conf_in1_out1_0).
% free path axiom for (in1->out1)#0
(all X (free(X, in1_out1_0) <-> (all T (-at(X, T, s7) & -at(X, T, s2) & -at(X, T, out1) & -at(X, T, s4) & -at(X, T, s3) & -at(X, T, s5))))) # label(free_in1_out1_0).

% switch configuration axiom for (in3->out3)#0
(all X (conf(X, in3_out3_0) <-> ((switch(X, s5) = s3) & (switch(X, s3) = out3)))) # label(conf_in3_out3_0).
% free path axiom for (in3->out3)#0
(all X (free(X, in3_out3_0) <-> (all T (-at(X, T, s5) & -at(X, T, s3) & -at(X, T, out3) & -at(X, T, s4) & -at(X, T, s7) & -at(X, T, s2))))) # label(free_in3_out3_0).

% switch configuration axiom for (in3->out2)#1
(all X (conf(X, in3_out2_1) <-> ((switch(X, s5) = out2)))) # label(conf_in3_out2_1).
% free path axiom for (in3->out2)#1
(all X (free(X, in3_out2_1) <-> (all T (-at(X, T, s5) & -at(X, T, out2) & -at(X, T, s4) & -at(X, T, s3) & -at(X, T, s7) & -at(X, T, s2))))) # label(free_in3_out2_1).

% switch configuration axiom for (in3->out2)#0
(all X (conf(X, in3_out2_0) <-> ((switch(X, s5) = s3) & (switch(X, s3) = out2)))) # label(conf_in3_out2_0).
% free path axiom for (in3->out2)#0
(all X (free(X, in3_out2_0) <-> (all T (-at(X, T, s5) & -at(X, T, s3) & -at(X, T, out2) & -at(X, T, s4) & -at(X, T, s7) & -at(X, T, s2))))) # label(free_in3_out2_0).

% switch configuration axiom for (in3->out1)#1
(all X (conf(X, in3_out1_1) <-> ((switch(X, s5) = s2)))) # label(conf_in3_out1_1).
% free path axiom for (in3->out1)#1
(all X (free(X, in3_out1_1) <-> (all T (-at(X, T, s5) & -at(X, T, s2) & -at(X, T, out1) & -at(X, T, s4) & -at(X, T, s3) & -at(X, T, s7))))) # label(free_in3_out1_1).

% switch configuration axiom for (in3->out1)#0
(all X (conf(X, in3_out1_0) <-> ((switch(X, s5) = s3) & (switch(X, s3) = out1)))) # label(conf_in3_out1_0).
% free path axiom for (in3->out1)#0
(all X (free(X, in3_out1_0) <-> (all T (-at(X, T, s5) & -at(X, T, s3) & -at(X, T, out1) & -at(X, T, s4) & -at(X, T, s2) & -at(X, T, s7))))) # label(free_in3_out1_0).

% the path ready axiom for (in1->out1)#1
(all X (ready(X, in1_out1_1) <-> ((clock(X) = in1) & free(X, in1_out1_1) & (exists T (at(X, T, in1) & (gate(T) = out1)))))) # label(ready_in1_out1_1).
% the path ready axiom for (in1->out1)#0
(all X (ready(X, in1_out1_0) <-> ((clock(X) = in1) & free(X, in1_out1_0) & (exists T (at(X, T, in1) & (gate(T) = out1)))))) # label(ready_in1_out1_0).
% the path ready axiom for (in1->out2)#0
(all X (ready(X, in1_out2_0) <-> ((clock(X) = in1) & free(X, in1_out2_0) & (exists T (at(X, T, in1) & (gate(T) = out2)))))) # label(ready_in1_out2_0).
% the path ready axiom for (in1->out3)#0
(all X (ready(X, in1_out3_0) <-> ((clock(X) = in1) & free(X, in1_out3_0) & (exists T (at(X, T, in1) & (gate(T) = out3)))))) # label(ready_in1_out3_0).

% the path ready axiom for (in2->out1)#1
(all X (ready(X, in2_out1_1) <-> ((clock(X) = in2) & free(X, in2_out1_1) & (exists T (at(X, T, in2) & (gate(T) = out1)))))) # label(ready_in2_out1_1).
% the path ready axiom for (in2->out1)#0
(all X (ready(X, in2_out1_0) <-> ((clock(X) = in2) & free(X, in2_out1_0) & (exists T (at(X, T, in2) & (gate(T) = out1)))))) # label(ready_in2_out1_0).
% the path ready axiom for (in2->out2)#1
(all X (ready(X, in2_out2_1) <-> ((clock(X) = in2) & free(X, in2_out2_1) & (exists T (at(X, T, in2) & (gate(T) = out2)))))) # label(ready_in2_out2_1).
% the path ready axiom for (in2->out2)#0
(all X (ready(X, in2_out2_0) <-> ((clock(X) = in2) & free(X, in2_out2_0) & (exists T (at(X, T, in2) & (gate(T) = out2)))))) # label(ready_in2_out2_0).
% the path ready axiom for (in2->out3)#0
(all X (ready(X, in2_out3_0) <-> ((clock(X) = in2) & free(X, in2_out3_0) & (exists T (at(X, T, in2) & (gate(T) = out3)))))) # label(ready_in2_out3_0).

% the path ready axiom for (in3->out1)#1
(all X (ready(X, in3_out1_1) <-> ((clock(X) = in3) & free(X, in3_out1_1) & (exists T (at(X, T, in3) & (gate(T) = out1)))))) # label(ready_in3_out1_1).
% the path ready axiom for (in3->out1)#0
(all X (ready(X, in3_out1_0) <-> ((clock(X) = in3) & free(X, in3_out1_0) & (exists T (at(X, T, in3) & (gate(T) = out1)))))) # label(ready_in3_out1_0).
% the path ready axiom for (in3->out2)#1
(all X (ready(X, in3_out2_1) <-> ((clock(X) = in3) & free(X, in3_out2_1) & (exists T (at(X, T, in3) & (gate(T) = out2)))))) # label(ready_in3_out2_1).
% the path ready axiom for (in3->out2)#0
(all X (ready(X, in3_out2_0) <-> ((clock(X) = in3) & free(X, in3_out2_0) & (exists T (at(X, T, in3) & (gate(T) = out2)))))) # label(ready_in3_out2_0).
% the path ready axiom for (in3->out3)#0
(all X (ready(X, in3_out3_0) <-> ((clock(X) = in3) & free(X, in3_out3_0) & (exists T (at(X, T, in3) & (gate(T) = out3)))))) # label(ready_in3_out3_0).

% control the switch configuration for (in1->out1)#1
(all X (((ready(X, in1_out1_1)) | (conf(X, in1_out1_1) & -free(X, in1_out1_1))) -> conf(succ(X), in1_out1_1))) # label(conf_in1_out1_1).
% control the switch configuration for (in1->out1)#0
(all X (((ready(X, in1_out1_0) & -ready(X, in1_out1_1)) | (conf(X, in1_out1_0) & -free(X, in1_out1_0))) -> conf(succ(X), in1_out1_0))) # label(conf_in1_out1_0).
% control the switch configuration for (in1->out2)#0
(all X (((ready(X, in1_out2_0)) | (conf(X, in1_out2_0) & -free(X, in1_out2_0))) -> conf(succ(X), in1_out2_0))) # label(conf_in1_out2_0).
% control the switch configuration for (in1->out3)#0
(all X (((ready(X, in1_out3_0)) | (conf(X, in1_out3_0) & -free(X, in1_out3_0))) -> conf(succ(X), in1_out3_0))) # label(conf_in1_out3_0).

% open the signal in1 when some outgoing path is ready
(all X (open(succ(X), in1) <-> (ready(X, in1_out1_1) | ready(X, in1_out1_0) | ready(X, in1_out2_0) | ready(X, in1_out3_0)))) # label(open_in1).

% control the switch configuration for (in2->out1)#1
(all X (((ready(X, in2_out1_1)) | (conf(X, in2_out1_1) & -free(X, in2_out1_1))) -> conf(succ(X), in2_out1_1))) # label(conf_in2_out1_1).
% control the switch configuration for (in2->out1)#0
(all X (((ready(X, in2_out1_0) & -ready(X, in2_out1_1)) | (conf(X, in2_out1_0) & -free(X, in2_out1_0))) -> conf(succ(X), in2_out1_0))) # label(conf_in2_out1_0).
% control the switch configuration for (in2->out2)#1
(all X (((ready(X, in2_out2_1)) | (conf(X, in2_out2_1) & -free(X, in2_out2_1))) -> conf(succ(X), in2_out2_1))) # label(conf_in2_out2_1).
% control the switch configuration for (in2->out2)#0
(all X (((ready(X, in2_out2_0) & -ready(X, in2_out2_1)) | (conf(X, in2_out2_0) & -free(X, in2_out2_0))) -> conf(succ(X), in2_out2_0))) # label(conf_in2_out2_0).
% control the switch configuration for (in2->out3)#0
(all X (((ready(X, in2_out3_0)) | (conf(X, in2_out3_0) & -free(X, in2_out3_0))) -> conf(succ(X), in2_out3_0))) # label(conf_in2_out3_0).

% open the signal in2 when some outgoing path is ready
(all X (open(succ(X), in2) <-> (ready(X, in2_out1_1) | ready(X, in2_out1_0) | ready(X, in2_out2_1) | ready(X, in2_out2_0) | ready(X, in2_out3_0)))) # label(open_in2).

% control the switch configuration for (in3->out1)#1
(all X (((ready(X, in3_out1_1)) | (conf(X, in3_out1_1) & -free(X, in3_out1_1))) -> conf(succ(X), in3_out1_1))) # label(conf_in3_out1_1).
% control the switch configuration for (in3->out1)#0
(all X (((ready(X, in3_out1_0) & -ready(X, in3_out1_1)) | (conf(X, in3_out1_0) & -free(X, in3_out1_0))) -> conf(succ(X), in3_out1_0))) # label(conf_in3_out1_0).
% control the switch configuration for (in3->out2)#1
(all X (((ready(X, in3_out2_1)) | (conf(X, in3_out2_1) & -free(X, in3_out2_1))) -> conf(succ(X), in3_out2_1))) # label(conf_in3_out2_1).
% control the switch configuration for (in3->out2)#0
(all X (((ready(X, in3_out2_0) & -ready(X, in3_out2_1)) | (conf(X, in3_out2_0) & -free(X, in3_out2_0))) -> conf(succ(X), in3_out2_0))) # label(conf_in3_out2_0).
% control the switch configuration for (in3->out3)#0
(all X (((ready(X, in3_out3_0)) | (conf(X, in3_out3_0) & -free(X, in3_out3_0))) -> conf(succ(X), in3_out3_0))) # label(conf_in3_out3_0).

% open the signal in3 when some outgoing path is ready
(all X (open(succ(X), in3) <-> (ready(X, in3_out1_1) | ready(X, in3_out1_0) | ready(X, in3_out2_1) | ready(X, in3_out2_0) | ready(X, in3_out3_0)))) # label(open_in3).

% the control clock has to be in one of the input nodes
(all X ((clock(X) = in1) | (clock(X) = in2) | (clock(X) = in3))) # label(clockOptions).
% the sequence of tics of the control clock
(all X ((succ(X) != X) -> ((clock(succ(X)) = in1) <-> (clock(X) = in3)))) # label(clockTic).
(all X ((succ(X) != X) -> ((clock(succ(X)) = in2) <-> (clock(X) = in1)))) # label(clockTic_0).
(all X ((succ(X) != X) -> ((clock(succ(X)) = in3) <-> (clock(X) = in2)))) # label(clockTic_1).
