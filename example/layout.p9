% all the node constants need to be different
((in1 != v1) & (in1 != in2) & (in1 != v2) & (in1 != out1) & (in1 != out2) & (v1 != in2) & (v1 != v2) & (v1 != out1) & (v1 != out2) & (in2 != v2) & (in2 != out1) & (in2 != out2) & (v2 != out1) & (v2 != out2) & (out1 != out2)) # label(nodesAllDiff).

% transition axiom for input node in1
(all X all T (at(succ(X), T, in1) <-> ((enter(X, T, in1) & (all R -at(X, R, in1))) | (at(X, T, in1) & (-goes(X, T) | -open(X, in1)))))) # label(node_in1).
% transition axiom for inner node v1
(all X all T (at(succ(X), T, v1) <-> ((at(X, T, v1) & -goes(X, T)) | (at(X, T, in1) & goes(X, T) & open(X, in1))))) # label(node_v1).
% transition axiom for input node in2
(all X all T (at(succ(X), T, in2) <-> ((enter(X, T, in2) & (all R -at(X, R, in2))) | (at(X, T, in2) & (-goes(X, T) | -open(X, in2)))))) # label(node_in2).
% transition axiom for inner node v2
(all X all T (at(succ(X), T, v2) <-> ((at(X, T, v2) & -goes(X, T)) | (at(X, T, in2) & goes(X, T) & open(X, in2))))) # label(node_v2).
% transition axiom for output node out1
(all X all T (at(succ(X), T, out1) <-> ((at(X, T, v1) & goes(X, T) & (switch(X, v1) = out1)) | (at(X, T, v2) & goes(X, T) & (switch(X, v2) = out1))))) # label(node_out1).
% transition axiom for output node out2
(all X all T (at(succ(X), T, out2) <-> ((at(X, T, v1) & goes(X, T) & (switch(X, v1) = out2)) | (at(X, T, v2) & goes(X, T) & (switch(X, v2) = out2))))) # label(node_out2).

% the gate function domain axiom
(all T ((gate(T) = out1) | (gate(T) = out2))) # label(gateDomain).
% the switch function domain axiom for v1
(all X ((switch(X, v1) = out1) | (switch(X, v1) = out2))) # label(switch_v1).
% the switch function domain axiom for v2
(all X ((switch(X, v2) = out1) | (switch(X, v2) = out2))) # label(switch_v2).

% no train can be at any two nodes in the same time
(all X all T all N1 all N2 ((at(X, T, N1) & at(X, T, N2)) -> (N1 = N2))) # label(singularTrainLocation).
% the train driver has to go eventually
(all X all T all N (at(X, T, N) -> (exists Y (less(X, Y) & goes(Y, T))))) # label(trainDriverGoes).
