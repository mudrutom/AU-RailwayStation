% all the path constants need to be different
((in2_out2_0 != in2_out1_0) & (in2_out2_0 != in1_out2_0) & (in2_out2_0 != in1_out1_0) & (in2_out1_0 != in1_out2_0) & (in2_out1_0 != in1_out1_0) & (in1_out2_0 != in1_out1_0)) # label(pathAllDiff).
% all and only the path constants are paths
(all P (path(P) <-> ((P = in2_out2_0) | (P = in2_out1_0) | (P = in1_out2_0) | (P = in1_out1_0)))) # label(pathPredicate).

% switch configuration axiom for (in2->out2)#0
(all X (conf(X, in2_out2_0) <-> ((switch(X, v2) = out2)))) # label(conf_in2_out2_0).
% free path axiom for (in2->out2)#0
(all X (free(X, in2_out2_0) <-> (all T (-at(X, T, v2) & -at(X, T, out2) & -at(X, T, v1))))) # label(free_in2_out2_0).

% switch configuration axiom for (in2->out1)#0
(all X (conf(X, in2_out1_0) <-> ((switch(X, v2) = out1)))) # label(conf_in2_out1_0).
% free path axiom for (in2->out1)#0
(all X (free(X, in2_out1_0) <-> (all T (-at(X, T, v2) & -at(X, T, out1) & -at(X, T, v1))))) # label(free_in2_out1_0).

% switch configuration axiom for (in1->out2)#0
(all X (conf(X, in1_out2_0) <-> ((switch(X, v1) = out2)))) # label(conf_in1_out2_0).
% free path axiom for (in1->out2)#0
(all X (free(X, in1_out2_0) <-> (all T (-at(X, T, v1) & -at(X, T, out2) & -at(X, T, v2))))) # label(free_in1_out2_0).

% switch configuration axiom for (in1->out1)#0
(all X (conf(X, in1_out1_0) <-> ((switch(X, v1) = out1)))) # label(conf_in1_out1_0).
% free path axiom for (in1->out1)#0
(all X (free(X, in1_out1_0) <-> (all T (-at(X, T, v1) & -at(X, T, out1) & -at(X, T, v2))))) # label(free_in1_out1_0).

% the path ready axiom for (in1->out1)#0
(all X (ready(X, in1_out1_0) <-> ((clock(X) = in1) & free(X, in1_out1_0) & (exists T (at(X, T, in1) & (gate(T) = out1)))))) # label(ready_in1_out1_0).
% the path ready axiom for (in1->out2)#0
(all X (ready(X, in1_out2_0) <-> ((clock(X) = in1) & free(X, in1_out2_0) & (exists T (at(X, T, in1) & (gate(T) = out2)))))) # label(ready_in1_out2_0).
% open the signal in1 when some outgoing path is ready
(all X (open(X, in1) <-> (ready(X, in1_out1_0) | ready(X, in1_out2_0)))) # label(open_in1).

% the path ready axiom for (in2->out1)#0
(all X (ready(X, in2_out1_0) <-> ((clock(X) = in2) & free(X, in2_out1_0) & (exists T (at(X, T, in2) & (gate(T) = out1)))))) # label(ready_in2_out1_0).
% the path ready axiom for (in2->out2)#0
(all X (ready(X, in2_out2_0) <-> ((clock(X) = in2) & free(X, in2_out2_0) & (exists T (at(X, T, in2) & (gate(T) = out2)))))) # label(ready_in2_out2_0).
% open the signal in2 when some outgoing path is ready
(all X (open(X, in2) <-> (ready(X, in2_out1_0) | ready(X, in2_out2_0)))) # label(open_in2).

% controlling of the station configuration (i.e. the switches)
(all X all P ((ready(X, P) | (conf(pred(X), P) & -free(X, P))) -> conf(X, P))) # label(confControl).

% the control clock has to be in one of the input nodes
(all X ((clock(X) = in1) | (clock(X) = in2))) # label(clockOptions).
% the sequence of tics of the control clock
(all X ((clock(X) = in2) <-> (clock(succ(X)) = in1))) # label(clockTic).
(all X ((clock(X) = in1) <-> (clock(succ(X)) = in2))) # label(clockTic_0).
