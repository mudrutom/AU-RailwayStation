% all the node constants need to be different
((in1 != v1) & (in1 != out1) & (in1 != out2) & (v1 != out1) & (v1 != out2) & (out1 != out2)) # label(nodesAllDiff).

% transition axiom for input node in1
(all X all T (at(succ(X), T, in1) <-> (enter(X, T, in1) | (at(X, T, in1) & (-goes(X, in1) | -open(X, in1)))))) # label(node_in1).
% entrance axiom for input node in1
(all X all T1 all T2 (((T1 != T2) & at(X, T1, in1)) -> -at(X, T2, in1))) # label(entrance_in1).
% transition axiom for inner node v1
(all X all T (at(succ(X), T, v1) <-> ((at(X, T, v1) & -goes(X, v1)) | (at(X, T, in1) & goes(X, in1) & open(X, in1))))) # label(node_v1).
% transition axiom for output node out1
(all X all T (at(succ(X), T, out1) <-> ((at(X, T, v1) & goes(X, v1) & (switch(X, v1) = out1))))) # label(node_out1).
% transition axiom for output node out2
(all X all T (at(succ(X), T, out2) <-> ((at(X, T, v1) & goes(X, v1) & (switch(X, v1) = out2))))) # label(node_out2).

% no train can be at any two nodes in the same time
(all X all T all N1 all N2 ((at(X, T, N1) & at(X, T, N2)) -> (N1 = N2))) # label(singularTrainLocation).
% the train driver has to go eventually
(all X all T all N (at(X, T, N) -> (exists Y (((X = Y) | less(X, Y)) & goes(Y, N))))) # label(trainDriverGoes).
