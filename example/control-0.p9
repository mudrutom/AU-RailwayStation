% all the path constants need to be different
((in1_out2_0 != in1_out1_0)) # label(pathAllDiff).

% switch configuration axiom for (in1->out2)#0
(all X (conf(X, in1_out2_0) <-> ((switch(X, v1) = out2)))) # label(conf_in1_out2_0).
% free path axiom for (in1->out2)#0
(all X (free(X, in1_out2_0) <-> (all T (-at(X, T, v1) & -at(X, T, out2))))) # label(free_in1_out2_0).

% switch configuration axiom for (in1->out1)#0
(all X (conf(X, in1_out1_0) <-> ((switch(X, v1) = out1)))) # label(conf_in1_out1_0).
% free path axiom for (in1->out1)#0
(all X (free(X, in1_out1_0) <-> (all T (-at(X, T, v1) & -at(X, T, out1))))) # label(free_in1_out1_0).

% the path ready axiom for (in1->out1)#0
(all X (ready(X, in1_out1_0) <-> ((clock(X) = in1) & free(X, in1_out1_0) & (exists T (at(X, T, in1) & (gate(T) = out1)))))) # label(ready_in1_out1_0).
% the path ready axiom for (in1->out2)#0
(all X (ready(X, in1_out2_0) <-> ((clock(X) = in1) & free(X, in1_out2_0) & (exists T (at(X, T, in1) & (gate(T) = out2)))))) # label(ready_in1_out2_0).

% control the switch configuration for (in1->out1)#0
(all X (((ready(X, in1_out1_0)) | (conf(X, in1_out1_0) & -free(X, in1_out1_0))) -> conf(succ(X), in1_out1_0))) # label(conf_in1_out1_0).
% control the switch configuration for (in1->out2)#0
(all X (((ready(X, in1_out2_0)) | (conf(X, in1_out2_0) & -free(X, in1_out2_0))) -> conf(succ(X), in1_out2_0))) # label(conf_in1_out2_0).

% open the signal in1 when some outgoing path is ready
(all X (open(succ(X), in1) <-> (ready(X, in1_out1_0) | ready(X, in1_out2_0)))) # label(open_in1).

% the control clock has to be in one of the input nodes
(all X ((clock(X) = in1))) # label(clockOptions).
% the sequence of tics of the control clock
(all X ((succ(X) != X) -> ((clock(succ(X)) = in1) <-> (clock(X) = in1)))) # label(clockTic).
